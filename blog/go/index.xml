<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go on Shubham Srivastava Blog</title>
    <link>https://sri-shubham.github.io/blog/go/</link>
    <description>Recent content in Go on Shubham Srivastava Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <copyright>Copyright Â© 2020, Shubham Srivastava.</copyright>
    <lastBuildDate>Sun, 07 Feb 2021 19:45:43 +0530</lastBuildDate><atom:link href="https://sri-shubham.github.io/blog/go/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting Started In gRPC With Go</title>
      <link>https://sri-shubham.github.io/getting-started-in-grpc-with-go/</link>
      <pubDate>Sun, 07 Feb 2021 19:45:43 +0530</pubDate>
      
      <guid>https://sri-shubham.github.io/getting-started-in-grpc-with-go/</guid>
      <description>This article will go through a basic introduction to gRPC with GO. This will walk through making a basic service in proto file, using protoc compiler to generate server and client code and implementation of client and server.
Perquisites Assuming you already have basic introduction to protocol buffers and gRPC
To follow along you can clone the example directory from github and navigate to Getting_Started_In_gRPC_WithGo/ example1
If you do not have protoc compiler installed you can learn how to do this here.</description>
    </item>
    
    <item>
      <title>Getting Started In Protobuf With Go</title>
      <link>https://sri-shubham.github.io/getting-started-in-protobuf-with-go/</link>
      <pubDate>Sat, 06 Feb 2021 16:53:17 +0530</pubDate>
      
      <guid>https://sri-shubham.github.io/getting-started-in-protobuf-with-go/</guid>
      <description>This article is a basic introduction to protocol buffers, I will go through what are protocol buffers and comparison to other alternatives :)
What are Protocol Buffers? &amp;ldquo;Protocol Buffers (a.k.a., protobuf) are Google&amp;rsquo;s language-neutral, platform-neutral, extensible mechanism for serializing structured data.&amp;rdquo; - https://developers.google.com
Protocol Buffers were designed to optimize the data transmitted over the wire. Protobuf provides binary serialization that results in smaller messages that need to be transferred over the wire compared to popular text based serialization in XML or JSON.</description>
    </item>
    
  </channel>
</rss>
